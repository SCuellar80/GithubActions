# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pip install pytest pytest-cov
        pytest PytestDir/parametrized.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
    # Paso 5: Publicar los resultados de pytest como un archivo de artefacto
    - name: Upload pytest results
      uses: actions/upload-artifact@v3
      with:
        name: junit-results
        path: junit/test-results.xml

    # Paso 6: #Upload junit test-results.xml to GitHub Actions (opcional)
    - name: Upload pytest results as JUnit XML
      run: |
        pytest --maxfail=1 --disable-warnings --junitxml=test-results.xml
        
    - name: Upload JUnit XML result
      uses: actions/upload-artifact@v3
      with:
        name: junit-results
        path: junit/test-results.xml
